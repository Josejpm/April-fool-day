{"version":3,"sources":["context/AppContext.js","components/layout/sidebar/Sidebar.js","components/stats/resume/resume.js","components/timers/main/main-timer.js","components/timers/aux/aux-timer.js","components/layout/main/Main.js","components/layout/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","props","useState","seconds","setSeconds","stats","setStats","click","setClick","colorLog","setColorLog","myColor","setMyColor","dataArray","userColor","setUserColor","resetB","secondsData","a","color","getColor","axios","Math","ceil","random","userName","saveColor","saveUser","getStats","data","username","unshift","colorArray","push","reduce","colorCount","Purple","Blue","Green","Yellow","Orange","Red","Grey","White","time","Provider","value","user","resetA","localStorage","setItem","children","Sidebar","useContext","className","map","u","Resume","statsArray","prop","item","Object","keys","values","MainTimer","cheater","setCheater","activeButton","JSON","parse","getItem","useEffect","interval","setInterval","clearInterval","onClick","disabled","AuxTimer","timer","setTimer","floor","Main","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc7bb542.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\nimport axios from 'axios'\nexport const AppContext = createContext();\n\n\nconst AppProvider = (props) => {\n  const [seconds,setSeconds]=useState(60);\n  const [stats,setStats]=useState({});\n  const [click,setClick]=useState(false)\n  const [colorLog,setColorLog] = useState([]);\n  const [myColor,setMyColor] = useState('')\n  const [userColor,setUserColor] = useState({\n      dataArray:[]\n  });\n  const {dataArray}=userColor;\n\n  //Funcion para el reset del timer al hacer click, obtiene el color asignado segun el tiempo\n  const resetA = ()=>{\n      const color = getColor(seconds);\n      setMyColor(color)\n      saveColor(color);\n      localStorage.setItem('activeButton','false')\n      setSeconds(60);\n      setStats(getStats());\n      setClick(true)\n  }\n  //Funcion para el reset del timer que simula otros usuarios en el juego, obtiene el color y el nombre de usuario\n  const resetB = async (secondsData)=>{\n      const color = getColor(secondsData);\n      const userName = await axios(`https://jsonplaceholder.typicode.com/users/${Math.ceil(Math.random()*10)}`);\n      saveColor(color);\n      saveUser(color,userName);\n      setStats(getStats());\n      setSeconds(60);\n  }\n\n  //Guarda el usuario asociando un color\n  const saveUser = (color,userName)=>{\n    const data = {\n      userName:userName.data.username,\n      color\n    }\n    dataArray.unshift(data)\n    setUserColor({dataArray})\n  }\n\n  //Funcion para guardar el color de cada usuario\n  const saveColor = (color)=>{\n    const colorArray = colorLog;\n    colorArray.push(color);\n    setColorLog(colorArray)\n  }\n\n  // Obtiene la estadistica de cuantas veces ha sido asignado un color\n  const getStats = ()=>{\n    const initialStats = {Purple:0,Blue:0,Green:0,Yellow:0,Orange:0,Red:0,Grey:0,White:0}\n    const colorStats = colorLog.reduce((colorCount,color)=>{\n      colorCount[color]=(colorCount[color] || 0)+1\n      return colorCount;\n    },initialStats)\n    return colorStats\n  }\n\n  //Asigna un color segun el tiempo que resta en el cronometro\n  const getColor= time =>{\n      if(time===0){\n        return 'Gray'\n      }else if(time>0 && time<12){\n          return 'Red'\n      }else if (time>=12 && time<22){\n          return 'Orange'\n      }else if (time>=22 && time<32){\n          return 'Yellow'\n      }else if (time>=32 && time<42){\n          return 'Green'\n      }else if (time>=42 && time<52){\n          return 'Blue'\n      }else if (time>=52 && time<=60){\n        return 'Purple'\n      }\n  }\n  return ( \n      <AppContext.Provider\n          value={{       \n              seconds,\n              stats,\n              click,\n              colorLog,\n              myColor,\n              user:userColor.dataArray,\n              resetA,\n              resetB,\n              setSeconds,\n              saveColor\n          }}\n      >\n          {props.children}\n      </AppContext.Provider>\n  );\n}\n \nexport default AppProvider;","import React, { useContext } from 'react'\nimport './Sidebar.scss'\nimport { AppContext } from '../../../context/AppContext';\n\n//Muestra visualizaciones para los eventos simulados\nconst Sidebar = () => {\n\n    const {user}=useContext(AppContext);\n    \n    return ( \n        <aside className=\"sidebar-container\">\n            <h2 className='sidebar-title'> Users Colors</h2>\n            <ul className='users-list'>\n            {user.map(u=>(\n                <li > \n                    <i className={`fas fa-check-circle ${u.color} `}></i> \n                    {u.color} has been assigned to {u.userName}\n                </li>\n            ))}\n            </ul>\n        </aside>\n     );\n}\n \nexport default Sidebar;","import React from 'react'\nimport './resume.scss'\nimport { useContext } from 'react';\nimport { AppContext } from '../../../context/AppContext';\n\n//Componente para las estadisticas del juego\nconst Resume = () => {\n    const {stats} = useContext(AppContext);\n    const statsArray=[];\n\n    for(const prop in stats){\n        statsArray.push({\n           [prop]:stats[prop] \n         })\n    }\n    return (\n        <div className=\"resume-container\">\n            {statsArray.map(item=>(\n                <p className=\"resume-item animated fadeIn\"> \n                    <span className={`${Object.keys(item)} number`}>{Object.values(item)}</span>  \n                    <span className='letter'>{Object.keys(item)}</span>  \n                </p>\n            ))}\n        </div> \n        \n     );\n}\n \nexport default Resume;","import React, { useEffect,useContext,useState } from 'react';\nimport './main-timer.scss'\nimport {AppContext} from '../../../context/AppContext'\nimport { Fragment } from 'react';\nimport Resume from '../../stats/resume/resume'\n\nconst MainTimer = () => {\n  const {seconds,setSeconds,resetA,click,myColor,saveColor}=useContext(AppContext)\n  const [cheater,setCheater] = useState(false)\n\n  const activeButton = JSON.parse( localStorage.getItem('activeButton') ) \n  if(activeButton===null){\n    localStorage.setItem('activeButton','true')\n  }\n\n  //Localstorage para no permitir los clicks mas de una vez\n  useEffect(() => {\n     if(!JSON.parse(localStorage.getItem('activeButton'))){\n       saveColor('White')\n       setCheater(true)\n     }  \n     // eslint-disable-next-line\n  }, [])\n\n  useEffect(() => {\n    let interval = null;\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1 );\n      }, 1000);\n    if (seconds === 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n    // eslint-disable-next-line\n  }, [seconds]);\n\n  return (\n    <Fragment>\n\n      <div className=\"timer-numbers\">\n          {seconds}\n      </div>\n\n        {activeButton \n          ? <button className='enabled-button' onClick={resetA}>Click me!</button>\n          : <button disabled className=\"disabled-button\">Can't click again!</button>\n        }\n\n      {cheater\n        ? \n          <Fragment>\n            <p className='color-message' > \n              <i className={`fas fa-check-circle`}></i> \n              You already clicked, therfore your assigned color is White\n            </p> \n            <Resume/>\n          </Fragment>\n\n        : null }\n\n      {click\n        ? <p className='color-message animated fast fadeIn' > \n            <i className={`fas fa-check-circle ${myColor} `}></i>\n            {myColor} color has been assigned to you\n          </p>\n        : null\n      }\n    </Fragment>\n  );\n};\n\nexport default MainTimer;","import React, { useState, useEffect, useContext, Fragment } from 'react';\nimport {AppContext} from '../../../context/AppContext'\n\n\nconst AuxTimer = () => {\n\n  //Timer auxiliar, tiene la finalidad de simular aleatoriamente otros clicks de usuarios conectados a la pagina\n  \n  const {resetB}=useContext(AppContext)\n  const [timer, setTimer] = useState(1)\n\n  useEffect(() => {\n    let interval = null;\n      interval = setInterval(() => {\n        setTimer(Math.floor(Math.random()*60000))\n        resetB(Math.floor(Math.random()*60));\n      }, timer );\n    return () => clearInterval(interval);\n    // eslint-disable-next-line\n  }, [timer]);\n\n  return (\n    <Fragment/>\n  );\n};\n\nexport default AuxTimer;","import React from 'react'\nimport './Main.scss'\nimport MainTimer from '../../timers/main/main-timer'\nimport AuxTimer from '../../timers/aux/aux-timer'\nimport { useContext } from 'react'\nimport { AppContext } from '../../../context/AppContext'\nimport Resume from '../../stats/resume/resume'\n\n//Componente principal donde se muestra el contador y las estadisticas\nconst Main = () => {\n    const {click} = useContext(AppContext)\n    return ( \n        <div className=\"main-container\">\n            <h1 className=\"main-title\" >April Fools Day!</h1>\n            <MainTimer/>\n            {click ? <Resume/> : null }\n            <AuxTimer/>\n        </div>\n     );\n}\n \nexport default Main;","import React from 'react'\nimport './footer.scss'\n\nconst Footer = () => {\n    return ( \n        <footer className=\"site-footer\">\n            Developed by Jose Rangel - 2015\n        </footer>\n     );\n}\n \nexport default Footer;","import React, { Fragment } from 'react'\nimport './scss/App.scss'\nimport Sidebar from './components/layout/sidebar/Sidebar';\nimport Main from './components/layout/main/Main';\nimport Footer from './components/layout/footer/footer';\nimport AppProvider from './context/AppContext'\n\nconst App = () => {\n    \n    return ( \n        <Fragment>\n            <AppProvider>\n                <div className=\"site-container\">\n                    <div className=\"info-container\">\n                        <Main/>\n                        <Sidebar/> \n                    </div>\n                    <Footer/>\n                </div>\n            </AppProvider>\n        </Fragment>\n     );\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}